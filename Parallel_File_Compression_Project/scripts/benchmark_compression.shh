#!/bin/bash

# Benchmark script to compare different compression algorithms and parallel vs sequential

set -euo pipefail

SAMPLE_DIR="benchmark_files"
RESULTS_FILE="compression_benchmark_results.txt"

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_header() {
    echo -e "${BLUE}$1${NC}"
    echo "$(printf '=%.0s' {1..50})"
}

print_info() {
    echo -e "${YELLOW}[INFO]${NC} $1"
}

# Create benchmark files
create_benchmark_files() {
    local num_files=${1:-10}
    local file_size_mb=${2:-1}
    
    print_header "Creating Benchmark Files"
    mkdir -p "$SAMPLE_DIR"
    
    print_info "Creating $num_files files of ${file_size_mb}MB each"
    
    for ((i=1; i<=num_files; i++)); do
        local file_path="$SAMPLE_DIR/benchmark_file_$i.txt"
        
        # Create file with random text content
        {
            echo "Benchmark file $i - Created on $(date)"
            echo "This file contains repeated content for compression testing."
            echo "File size target: ${file_size_mb}MB"
            echo "----------------------------------------"
            
            # Generate content to reach target size
            local target_size=$((file_size_mb * 1024 * 1024))
            local content="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. "
            
            while [ $(stat -c%s "$file_path" 2>/dev/null || echo 0) -lt $target_size ]; do
                echo "$content"
            done
        } > "$file_path"
        
        # Truncate to exact size
        truncate -s "${file_size_mb}M" "$file_path"
        
        local actual_size=$(stat -c%s "$file_path")
        echo "Created: $file_path ($(numfmt --to=iec $actual_size))"
    done
}

# Benchmark function
run_benchmark() {
    local algorithm=$1
    local method=$2  # "python" or "shell"
    local parallel=$3  # "parallel" or "sequential"
    
    local output_dir="results_${algorithm}_${method}_${parallel}"
    mkdir -p "$output_dir"
    
    print_info "Running $algorithm compression using $method ($parallel)"
    
    local start_time=$(date +%s.%N)
    
    if [ "$method" = "python" ]; then
        if [ "$parallel" = "parallel" ]; then
            python3 scripts/parallel_compress_python.py -a "$algorithm" -o "$output_dir" "$SAMPLE_DIR"/*.txt
        else
            # Sequential Python (using 1 worker)
            python3 scripts/parallel_compress_python.py -a "$algorithm" -o "$output_dir" -w 1 "$SAMPLE_DIR"/*.txt
        fi
    else
        if [ "$parallel" = "parallel" ]; then
            bash scripts/parallel_compress_shell.sh -a "$algorithm" -o "$output_dir" "$SAMPLE_DIR"/*.txt
        else
            # Sequential shell (using 1 job)
            bash scripts/parallel_compress_shell.sh -a "$algorithm" -o "$output_dir" -j 1 "$SAMPLE_DIR"/*.txt
        fi
    fi
    
    local end_time=$(date +%s.%N)
    local total_time=$(echo "$end_time - $start_time" | bc -l)
    
    # Calculate compression statistics
    local original_size=$(du -sb "$SAMPLE_DIR" | cut -f1)
    local compressed_size=$(du -sb "$output_dir" | cut -f1)
    local compression_ratio=$(echo "scale=2; (1 - $compressed_size / $original_size) * 100" | bc -l)
    
    # Log results
    {
        echo "Algorithm: $algorithm"
        echo "Method: $method"
        echo "Mode: $parallel"
        echo "Time: ${total_time}s"
        echo "Original Size: $(numfmt --to=iec $original_size)"
        echo "Compressed Size: $(numfmt --to=iec $compressed_size)"
        echo "Compression Ratio: ${compression_ratio}%"
        echo "Files: $(ls "$SAMPLE_DIR"/*.txt | wc -l)"
        echo "Date: $(date)"
        echo "---"
    } >> "$RESULTS_FILE"
    
    printf "Time: %.2fs | Compression: %.1f%% | Size: %s -> %s\n" \
           "$total_time" "$compression_ratio" \
           "$(numfmt --to=iec $original_size)" \
           "$(numfmt --to=iec $compressed_size)"
}

# Main benchmark
main() {
    local num_files=${1:-5}
    local file_size_mb=${2:-1}
    
    print_header "Parallel Compression Benchmark"
    
    # Clean up previous results
    rm -rf benchmark_files results_* "$RESULTS_FILE" 2>/dev/null || true
    
    # Create benchmark files
    create_benchmark_files "$num_files" "$file_size_mb"
    
    echo
    print_header "Running Benchmarks"
    
    # Test different algorithms and methods
    local algorithms=("gzip" "bzip2" "xz")
    local methods=("python" "shell")
    local modes=("sequential" "parallel")
    
    for algorithm in "${algorithms[@]}"; do
        echo
        print_info "Testing $algorithm compression"
        echo "$(printf '-%.0s' {1..30})"
        
        for method in "${methods[@]}"; do
            for mode in "${modes[@]}"; do
                printf "%-8s %-8s %-10s: " "$algorithm" "$method" "$mode"
                run_benchmark "$algorithm" "$method" "$mode"
                sleep 1  # Brief pause between tests
            done
        done
    done
    
    echo
    print_header "Benchmark Results Summary"
    cat "$RESULTS_FILE"
    
    echo
    print_info "Benchmark completed! Results saved to $RESULTS_FILE"
    print_info "Compressed files are in results_* directories"
}

# Run benchmark with command line arguments
main "${1:-5}" "${2:-1}"
